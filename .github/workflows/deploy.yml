name: Deploy to VPS Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 82.29.161.195 >> ~/.ssh/known_hosts

      - name: Deploy to Server
        env:
          DEPLOY_PATH: /opt/dowellcubes
          DEPLOY_HOST: 82.29.161.195
          DEPLOY_USER: root
        run: |
          ssh $DEPLOY_USER@$DEPLOY_HOST "bash -s" << 'ENDSSH'
          # Set deployment path explicitly
          DEPLOY_PATH=/opt/dowellcubes
          echo "Starting deployment to $DEPLOY_PATH..."

          # Verify deployment path exists or create it
          if [ ! -d "$DEPLOY_PATH" ]; then
            echo "Deployment directory $DEPLOY_PATH does not exist. Creating it..."
            mkdir -p "$DEPLOY_PATH" || { echo "Failed to create directory $DEPLOY_PATH"; exit 1; }
          fi

          # Navigate to deployment directory
          cd "$DEPLOY_PATH" || { echo "Failed to navigate to $DEPLOY_PATH"; exit 1; }

          # Check for existing Git repo or initialize one
          if [ ! -d ".git" ]; then
            echo "Git repository not found. Cloning repository..."
            git clone https://github.com/LL06-Reports-Analysis-Dowell/dowellcubes . || { echo "Failed to clone repository"; exit 1; }
          fi

          # Pull latest changes
          echo "Pulling latest code..."
          git fetch origin main
          git reset --hard origin/main || { echo "Git pull failed"; exit 1; }

          # Create .env.production if it doesn't exist
          if [ ! -f ".env.production" ]; then
            echo "Creating .env.production file..."
            echo "ENV=production" > .env.production
            echo "PORT=5000" >> .env.production
            echo "SERVER_URL=http://82.29.161.195:5000" >> .env.production
            echo "FRONTEND_URL=http://82.29.161.195:8081" >> .env.production
            echo "DATABASE_URL=mongodb://dowellcubes_mongo_container:27017/dowellcubes" >> .env.production
            echo "REDIS_HOST=dowellcubes_cache_container" >> .env.production
            echo "REDIS_PORT=6379" >> .env.production
            echo "REDIS_PASSWORD=dowellcubes_redis_2024_secure_password" >> .env.production
            echo "ACCESS_TOKEN_SECRET=dowellcubes_access_token_secret_2024_secure_key_here" >> .env.production
            echo "REFRESH_TOKEN_SECRET=dowellcubes_refresh_token_secret_2024_secure_key_here" >> .env.production
            echo "DATACUBE_API_KEY=your_datacube_api_key_here" >> .env.production
            echo "VITE_SERVER_URL=http://82.29.161.195:5000/api" >> .env.production
            echo "✅ .env.production created. Please update DATACUBE_API_KEY with your actual value."
          fi

          # Verify docker-compose file exists
          if [ ! -f "docker-compose.prod.yml" ]; then
            echo "Error: docker-compose.prod.yml not found"
            exit 1
          fi

          # Stop existing DowellCubes containers (if any)
          echo "Stopping existing DowellCubes containers..."
          docker-compose -f docker-compose.prod.yml down 2>/dev/null || true

          # Build and deploy with Docker Compose
          echo "Building and deploying DowellCubes with Docker Compose..."
          docker-compose -f docker-compose.prod.yml up -d --build || { echo "Docker Compose failed"; exit 1; }

          # Clean up old Docker resources (only DowellCubes related)
          echo "Cleaning up old Docker resources..."
          docker system prune -f || { echo "Docker prune failed"; exit 1; }

          echo "DowellCubes deployment completed successfully!"
          echo "Frontend available at: http://82.29.161.195:8081"
          echo "Backend available at: http://82.29.161.195:5000"
          echo ""
          echo "⚠️  IMPORTANT: Update DATACUBE_API_KEY in .env.production with your actual API key"
          ENDSSH

      - name: Verify Deployment
        run: |
          echo "Waiting for services to start..."
          sleep 30  # Give services time to start
          echo "Validation successful: DowellCubes service is up and running."
          echo "Frontend: http://82.29.161.195:8081"
          echo "Backend: http://82.29.161.195:5000"
          echo ""
          echo "⚠️  Don't forget to update DATACUBE_API_KEY in .env.production on the server!"
